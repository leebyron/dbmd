var http = require('http');
var url = require('url');
var path = require('path');
var fs = require('fs');
var s3auth = require('./s3auth');

/**
 * Shortcut for `new Client()`.
 *
 * @param {Object} options
 * @see Client()
 * @api public
 */
exports.createClient = function(options) {
  return new Client(options);
};

/**
 * Initialize a `Client` with the given `options`.
 *
 * Required:
 *
 *  - key     amazon api key
 *  - secret  amazon secret
 *  - bucket  bucket name
 *
 * @param {Object} options
 * @api public
 */
function Client(options) {
  if (!options.key) throw new Error('aws "key" required');
  if (!options.secret) throw new Error('aws "secret" required');
  if (!options.bucket) throw new Error('aws "bucket" required');

  this.key = options.key;
  this.secret = options.secret;
  this.bucket = options.bucket;
  this.endpoint = options.bucket + '.s3.amazonaws.com';
};

/**
 * GET `filename` with optional `headers` and callback `fn`
 * with a possible exception and the response.
 *
 * @param {String} filename
 * @param {Object|Function} headers
 * @param {Function} fn
 * @api public
 */
Client.prototype.getFile = function(filename, headers, callback) {
  return this._request('GET', filename, headers, callback).end();
};

/**
 * Issue a HEAD request on `filename` with optional `headers`
 * and callback `fn` with a possible exception and the response.
 *
 * @param {String} filename
 * @param {Object|Function} headers
 * @param {Function} fn
 * @api public
 */
Client.prototype.headFile = function(filename, headers, callback) {
  return this._request('HEAD', filename, headers, callback).end();
};

/**
 * DELETE `filename` with optional `headers`
 * and callback `fn` with a possible exception and the response.
 *
 * @param {String} filename
 * @param {Object|Function} headers
 * @param {Function} fn
 * @api public
 */
Client.prototype.deleteFile = function(filename, headers, callback) {
  return this._request('DELETE', filename, headers, callback).end();
};

/**
 * PUT data to `filename` with optional `headers`.
 *
 * Example:
 *
 *     // Fetch the size
 *     fs.stat('Readme.md', function(err, stat) {
 *      // Create our request
 *      var req = client.put('/test/Readme.md', {
 *          'Content-Length': stat.size
 *        , 'Content-Type': 'text/plain'
 *      });
 *      fs.readFile('Readme.md', function(err, buf) {
 *        // Output response
 *        req.on('response', function(res) {
 *          console.log(res.statusCode);
 *          console.log(res.headers);
 *          res.on('data', function(chunk) {
 *            console.log(chunk.toString());
 *          });
 *        });
 *        // Send the request with the file's Buffer obj
 *        req.end(buf);
 *      });
 *     });
 *
 * @param {String} filename
 * @param {Object} headers
 * @return {ClientRequest}
 * @api public
 */
Client.prototype.putFile = function(filename, headers) {
  headers = merge({
    'Expect': '100-continue',
    'x-amz-acl': 'public-read',
  }, headers || {});
  return this._request('PUT', filename, headers);
};

/**
 * Return a url to the given `filename`.
 *
 * @param {String} filename
 * @return {String}
 * @api public
 */
Client.prototype.url = function(filename) {
  filename = filename.replace(' ', '+');
  return 'http://' + path.join(this.endpoint, filename);
};

/**
 * Return an S3 presigned url to the given `filename`.
 *
 * @param {String} filename
 * @param {Date} expiration
 * @return {String}
 * @api public
 */
Client.prototype.signedUrl = function(filename, expiration) {
  var signature = s3auth.signQuery({
    secret: this.secret,
    date: Math.floor(expiration.getTime() / 1000),
    resource: '/' + this.bucket + url.parse(filename).pathname
  });

  return this.url(filename) +
    '?Expires=' + epoch +
    '&AWSAccessKeyId=' + this.key +
    '&Signature=' + encodeURIComponent(signature);
};

/**
 * Request with `filename` the given `method`, and optional `headers`.
 *
 * @param {String} method
 * @param {String} filename
 * @param {Object} headers
 * @param {Function} callback
 * @return {ClientRequest}
 * @api private
 */
Client.prototype._request = function(method, filename, headers, callback) {
  if ('function' == typeof headers) {
    callback = headers;
    headers = {};
  }

  filename = filename.replace(' ', '+');

  var options = {host: this.endpoint, port: 80};
  var date = new Date();
  headers = headers || {};

  // Default headers
  merge(headers, {
    Date: date.toUTCString(),
    Host: this.endpoint
  });

  // Authorization header
  headers.Authorization = s3auth.authorization({
    key: this.key,
    secret: this.secret,
    verb: method,
    date: date,
    resource: s3auth.canonicalizeResource(path.join('/', this.bucket, filename)),
    contentType: headers['Content-Type'],
    amazonHeaders: s3auth.canonicalizeHeaders(headers)
  });

  // Issue request
  options.method = method;
  options.path = path.join('/', filename);
  options.headers = headers;
  var req = http.request(options);
  req.url = this.url(filename);

  if (callback) {
    return req.on('response', callback);
  } else {
    return req;
  }
};

function merge(a, b) {
  var keys = Object.keys(b);
  for (var ii = 0; ii < keys.length; ++ii) {
    a[keys[ii]] = b[keys[ii]]
  }
  return a;
};
